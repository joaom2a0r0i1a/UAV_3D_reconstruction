<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="voxel_size" default="0.2"/>
  <arg name="voxels_per_side" default="16" />
  <arg name="truncation_distance" default="1" />
  <arg name="method" default="fast"/>
  <arg name="ray_length" default="5" />

  <!-- defines name of the namespace of the drone -->
  <arg name="UAV_NAME" default="$(optenv UAV_NAME uav1)" />

  <arg name="world_frame" default="$(arg UAV_NAME)/world_origin" />

  <group ns="$(arg UAV_NAME)">

    <!--Depth camera PointCloud-->
    <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" />

    <!--Re-register from depth camera to RGB camera-->
    <node pkg="nodelet" type="nodelet" name="register" args="load depth_image_proc/register standalone_nodelet">
      <remap from="rgb/camera_info" to="/$(arg UAV_NAME)/rgbd_front_pitched/color/camera_info"/>
      <remap from="depth/camera_info" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/camera_info"/>
      <remap from="depth/image_rect" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/image_raw"/>
      <remap from="depth_registered/camera_info" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/camera_info_tf"/>
      <remap from="depth_registered/image_rect" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/image_raw_tf"/>
    </node>

    <!--Make Depth camera PointCloud-->
    <node pkg="nodelet" type="nodelet" name="point_cloud_xyzrgb" args="load depth_image_proc/point_cloud_xyzrgb standalone_nodelet">
      <remap from="rgb/camera_info" to="/$(arg UAV_NAME)/rgbd_front_pitched/color/camera_info"/>
      <remap from="rgb/image_rect_color" to="/$(arg UAV_NAME)/rgbd_front_pitched/color/image_raw"/>
      <remap from="depth_registered/image_rect" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/image_raw_tf"/>
      <remap from="depth_registered/points" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/points"/>
    </node>

    <!--Voxblox Mapping-->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr" clear_params="true">
      <remap from="pointcloud" to="/$(arg UAV_NAME)/rgbd_front_pitched/aligned_depth_to_color/points"/>
      <!--remap from="pointcloud" to="/$(arg UAV_NAME)/velodyne/scan"/-->
      <remap from="~esdf_map_out" to="esdf_map" />
      <remap from="~tsdf_map_out" to="tsdf_map" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <!--param name="truncation_distance" value="$(arg truncation_distance)" /-->
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length_m" value="$(arg ray_length)" />

      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />

      <param name="mesh_filename" value="$(find motion_planning_python)/data/fire_station_test.ply" />

      <!--param name="clear_sphere_for_planning" value="true" /-->
      <!--param name="clear_sphere_radius" value="7" /-->
      <!--param name="occupied_sphere_radius" value="10" /-->

      <param name="color_mode" value="color" />
      <param name="use_tf_transforms" value="true" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="min_time_between_msgs_sec" value="0.0" />
      <param name="use_const_weight" value="false" />
      <param name="allow_clear" value="true" />

      <param name="verbose" value="true" />
      <param name="world_frame" value="$(arg world_frame)" />
    </node>

  </group>

</launch>

